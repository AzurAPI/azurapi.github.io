# Ship Information
<aside class="precaution">Some servers may consider some skins as NSFW content, if you are delivering a bot for a specific Discord server, please discuss how this should be implemented before designing</aside>

This section contains the results and functions developers need to use for fetching ship information. The name of the ship is implemented in game are provided in the payload returned on the right. But, developers should be able to provide their own error handling for misspelt names.

## Return Value
> The return value when fetched:

```json
{
  "wikiUrl": "String",
  "id": "String",
  "names": { "code": "String","en": "String", "code": "String", "cn": "String", "jp": "String", "kr": "String" },
  "class": "String",
  "nationality": "String",
  "hullType": "String",
  "thumbnail": "String",
  "rarity": "String",
  "stars": { "stars": "String", "value": "Number" },
  "stats": {
    "level120": "Refer to object format for Stats",
    "level100": "Refer to object format for Stats",
    "baseStats": "Refer to object format for Stats",
    "level100Retrofit": "Refer to object format for Stats",
    "level120Retrofit": "Refer to object format for Stats"
  },
  "slots": {
    1: "Refer to Slot Table",
    2: "Refer to Slot Table",
    3: "Refer to Slot Table"
  },
  "enhanceValue": { "firepower": "Number", "torpedo": "Number", "aviation": "Number", "reload": "Number" },
  "scrapValue": { "coin": "Number", "oil": "Number", "medal": "Number" },
  "skills": [
    "Refer to object format for Skill"
    /* Same Format for the Rest of the Skills */
  ],

  "limitBreaks": [
    /* Each Limit Break will have an array of upgrade stats,
    first layer = breaks, second layer = bonus */
  ],
  "fleetTech": {
    "statsBonus": { "collection": [Object], "maxLevel": [Object] },
    "techPoints": { "collection": 14, "maxLimitBreak": 28, "maxLevel": 21, "total": 63 }
  },
  "construction": {
    "constructionTime": "String",
    "availableIn": { "light": "Boolean", "heavy": "Boolean", "aviation": "Boolean", "limited": "Boolean", "exchange": "Boolean" }
  },
  "gallery": [
    /* Array of Gallery Images in the following Format */
    { "description": "String", "url": "String" }
  ],
  "misc": {
    "artist": "String",
    "web": "Refer to object format for Artist",
    "pixiv": "Refer to object format for Artist",
    "twitter": "Refer to object format for Artist",
    "voice": "Refer to object format for Artist"
  },
  "skins": [
    { "name": "String", "image": "String", "background": "String", "chibi": "String", "info": [Object] }
    /* Same Format for the rest of the skins */
  ]
}
```

### Artist Data

<div class="center-column"></div>

```json
{
    "name": "String",
    "url": "String"
}
```


### Slot Data

<div class="center-column"></div>

```json
{
    "type": "String",
    "minEfficiency": "Number",
    "maxEfficiency": "Number"
}
```

### Ship Statistics

<div class="center-column"></div>

```json
{
    "health": "String",
    "armor": "String",
    "reload": "String",
    "luck": "String",
    "firepower": "String",
    "torpedo": "String",
    "evasion": "String",
    "speed": "String",
    "antiair": "String",
    "aviation": "String",
    "oilConsumption": "String",
    "accuracy": "String",
    "antisubmarineWarfare": "String",

    <!-- For Submarines -->
    "oxygen": "String",
    "ammunition": "String",
    "huntingRange": "String"
}
```
### Skill Data

<div class="center-column"></div>

```json
{
    "icon": "String",
    "names": {
      "en": "string",
      "cn": "string",
      "jp": "string",
      "kr": "string"
    }
    "description": "string",
    "color": "string"
}
```

## Query by name

```javascript
import { getShip } from '@azurapi/azurapi' //ES6
//const { getShip } = require('@azurapi/azurapi') //ES5
console.log(getShip('Z23'))

//Alternative
const azurlane = require('@azurapi/azurapi') //ES5
console.log(azurlane.getShipByEnglishName('Z23'))
```
```python
api.getShipByNameEn(ship="Enterprise")
```
```kotlin
/* Use methods from Atago class */
Atago.getShipByName("atago")
```
The table below allows you to configure the type of language as pointed of reference in name detection.

<aside class="notice">Please note that only multilingual support auto queries by what language it was assigned to.</aside>

| Type          | Main Method           | Alternative  Method   |
| ------------- | --------------------- | --------------------- |
| Multifunction | getShip               |                       |
| Multilingual  | getShipByName         |                       |
| English       | getShipByEnglishName  | getShipByNameEn       |
| Japanese      | getShipByJapaneseName | getShipByNameKr       |
| Chinese       | getShipByChineseName  | getShipByNameJp       |
| Korean        | getShipByKoreanName   | getShipByNameCn       |


## Query by ID

```javascript
const azurlane = require('@azurapi/azurapi') //ES5
console.log(azurlane.getShipById('115'))
```
```python
# sid stands for "ship id" since id is a reserved function name in Python
api.getShipById(sid=115)
api.getShipById(sid="115")
```
```kotlin
/* Use methods from Atago class */
Atago.getShipById("atago")
```

<aside class="warning">Note that the function "getShips" will remove support for ship ids because there are different type of IDs to cater and previously, we relied on the 3 digit aspect of the ID but made it so it was colliding with names and have a bigger impact when fetching results.</aside>

This is the different types of IDs avaliable to people to select, have a look at this table and allow what your app needs.

| Types                        | Examples    |
|------------------------------|-------------|
| Normal                       | "001"       |
| Unreleased/Retrofitted Ships | "3005"      |
| Research Ships               | "Plan001"   |
| Collabouration Ships         | "Collab001" |
